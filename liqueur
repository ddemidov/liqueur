#!/usr/bin/python -u

# Copyright (c) 2011 Denis Demidov
# 
# The MIT License
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import re

#----------------------------------------------------------------------------
# Configuration
#----------------------------------------------------------------------------
# Nodes with load_avg above this will not be shutdown.
load_tol = 0.4

# Interval between node wakeups
wake_time = 5

# Shutdown time
shut_time = 5

# For a node to be shutdown it has to be idle for this number of intervals
# in a row. So if gridengine's load_report_time parameter equals 00:01:00 and
# max_idle == 20, node has to be idle for 20 minutes before it goes down.
max_idle = 20

# Liqueur will try to wake up enough nodes to satisfy pending jobs requirements.
# This is the list of resources that should be met. Each resource is the name
# of gridengine complex as in output of `qstat -F -xml`.
managed_resources = ['cores', 'tesla_2070']

# Should Liqueur output debug info to syslog?
debug = True

# Returns True if node with a given name should be managed by Liqueur.
def managed_node(hostname):
    # Example with exceptions: node01 and node02 should not be managed.
    #   m = re.match('node(?P<num>\d+)', hostname)
    #   return m and m.group('num') not in ['01', '02']

    # Simple matching:
    return re.match('node.*', hostname)

#----------------------------------------------------------------------------
# How to wake a node up?
#----------------------------------------------------------------------------
# Broadcast address for sending wake-on-lan packet.
ifaddr = "192.168.29.255"

# MAC-addresses of computing nodes.
macaddr = {
    "node1" : "20:cf:30:e4:1c:e3",
    "node2" : "20:cf:30:4c:dc:6d",
    "node3" : "20:cf:30:e4:1e:99",
    "node4" : "20:cf:30:e4:1e:89",
    }

def wakeup_node(name):
    if self.name in macaddr:
	subprocess.Popen(['wol', '-i', ifaddr, macaddr[name]])
    else:
	syslog("%s has no mac-address")

#----------------------------------------------------------------------------
# How to shut a node down?
#----------------------------------------------------------------------------
def shutdown_node(name):
    subprocess.Popen(['ssh', name, 'poweroff'])

#----------------------------------------------------------------------------
# Code
#----------------------------------------------------------------------------
import subprocess, time, sys
from lxml   import etree
from syslog import syslog

# Holds state of a node.
class Host:
    def __init__(self, name):
	self.name = name
	self.jobs = 0
	self.load = 0
	self.idle = 0

	self.resource = {}
	self.queues   = []

    def down(self):
	return self.load == '-'

    # Tries to wake the node up.
    def wakeup(self):
	if self.down():
	    syslog("Waking %s up" % h)
	    wakeup_node(self.name)
	    self.idle = 0
	    time.sleep(wake_time)
	    return True
	else:
	    return False

    # Shuts the node down.
    def shutdown(self):
	if self.down() or int(self.jobs) != 0:
	    self.idle = 0
	    return

	self.idle += 1

	if self.idle > max_idle and float(self.load) < load_tol:
	    # Disable all queues on the node
	    for q in self.queues:
		subprocess.Popen(['qmod', '-d', q + "@" + self.name])

	    # Check that no jobs sneaked into the host
	    qhost = etree.fromstring(subprocess.check_output(
		['qhost', '-h', self.name, '-q', '-xml']))

	    slots = sum([int(s.text) for s in qhost.findall(
		"host/queue/queuevalue[@name='slots_used']")])

	    if slots == 0:
		# Safely shutdown
		syslog("Shutting %s down" % self.name)
		shutdown_node(self.name)
		time.sleep(wake_time)
	    else:
		self.idle = 0

	    # Re-enable queues
	    for q in self.queues:
		subprocess.Popen(['qmod', '-e', q + "@" + self.name])

hosts = {}

while True:
    if raw_input() == "quit":
	sys.exit(1)

    print "begin"

    # Parse output of qstat and qhost
    qhost = etree.fromstring(subprocess.check_output(
	['qhost', '-q', '-F', '-xml']))
    qstat = etree.fromstring(subprocess.check_output(
	['qstat', '-s', 'p', '-r', '-u', '*', '-xml']))

    # Get resource requests for pending jobs
    require = {"slots" : 0}
    for r in managed_resources: require[r] = 0

    for job in qstat.findall('job_info/job_list'):
	slots = int(job.findtext("slots"))
	require["slots"] += slots

	for r in managed_resources:
	    require[r] += slots * float(
		    job.findtext("hard_request[@name='" + r + "']") or 0)

    # Get host list
    for h in qhost.findall('host'):
	name = h.get('name')
	if not managed_node(name): continue

	if name not in hosts: hosts[name] = Host(name)

	hosts[name].load = h.findtext("hostvalue[@name='load_avg']")

	if hosts[name].down():
	    hosts[name].idle = 0

	hosts[name].jobs = h.findtext("queue/queuevalue[@name='slots_used']")

	# Get list of host resources
	hosts[name].resource["slots"] = int(
		h.findtext("hostvalue[@name='num_proc']"))
	for r in managed_resources:
	    hosts[name].resource[r] = float(
		    h.findtext("resourcevalue[@name='" + r + "']"))

	# Get list of host queues
	hosts[name].queues = [q.get("name") for q in h.findall("queue")]

	debug and syslog("%s: jobs(%s) load(%s) idle(%s)" % (
	    name, hosts[name].jobs, hosts[name].load, hosts[name].idle))

	print "%s:idle:%s" % (name, hosts[name].idle)

    # Analyze queue status
    if require["slots"] > 0:
	# Wake up!
	for h in hosts:
	    if hosts[h].wakeup():
		for r in ["slots"] + managed_resources:
		    require[r] -= hosts[h].resource[r]
		if max(require.values()) <= 0: break
    else:
	# Shut someone down?
	for h in hosts: hosts[h].shutdown()

    print "end"
